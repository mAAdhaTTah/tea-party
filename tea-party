#!/bin/bash

export HOMEBREW_CASK_OPTS="--appdir=/Applications"

BGreen='\e[1;32m'       # Green
BRed='\e[1;31m'         # Red
Color_Off='\e[0m'       # Text Reset

function setStatusMessage {
    printf "${IRed} --> ${BGreen}$1${Color_Off}\n" 1>&2
}

function setSuccessMessage {
    printf "${BGreen}$1${Color_Off}\n" 1>&2
}

function triggerError {
    printf "${BRed} --> $1 ${Color_Off}\n" 1>&2
    exit 1
}

# Check whether a command exists - returns 0 if it does, 1 if it does not
function exists {
  if command -v $1 >/dev/null 2>&1
  then
    return 0
  else
    return 1
  fi
}

# credits https://github.com/boxcutter/osx/blob/master/script/xcode-cli-tools.sh
function install_clt {
    # Get and install Xcode CLI tools
    OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')

    # on 10.9+, we can leverage SUS to get the latest CLI tools
    if [ "$OSX_VERS" -ge 9 ]; then
        # create the placeholder file that's checked by CLI updates' .dist code
        # in Apple's SUS catalog
        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
        # find the CLI Tools update
        PROD=$(softwareupdate -l | grep "\*.*Command Line" | head -n 1 | awk -F"*" '{print $2}' | sed -e 's/^ *//' | tr -d '\n')
        # install it
        softwareupdate -i "$PROD" --verbose
        rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    # on 10.7/10.8, we instead download from public download URLs, which can be found in
    # the dvtdownloadableindex:
    # https://devimages.apple.com.edgekey.net/downloads/xcode/simulators/index-3905972D-B609-49CE-8D06-51ADC78E07BC.dvtdownloadableindex
    else
        [ "$OSX_VERS" -eq 7 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
        [ "$OSX_VERS" -eq 7 ] && ALLOW_UNTRUSTED=-allowUntrusted
        [ "$OSX_VERS" -eq 8 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_osx_mountain_lion_april_2014.dmg

        TOOLS=clitools.dmg
        curl "$DMGURL" -o "$TOOLS"
        TMPMOUNT=`/usr/bin/mktemp -d /tmp/clitools.XXXX`
        hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
        installer $ALLOW_UNTRUSTED -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
        hdiutil detach "$TMPMOUNT"
        rm -rf "$TMPMOUNT"
        rm "$TOOLS"
        exit
    fi
}

function get_sudo {
    setStatusMessage "Checking if we need to ask for a sudo password"
    sudo -v
    setStatusMessage "Keep-alive: update existing sudo time stamp until we are finished"
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

function install_roles {
    setStatusMessage "Get all the required roles"
    ansible-galaxy install -f -r requirements.yml -p vendor/roles
}

printf "${BGreen} ╔╦╗┌─┐┌─┐  ╔═╗┌─┐┬─┐┌┬┐┬ ┬ ${Color_Off}\n";
printf "${BGreen}  ║ ├┤ ├─┤  ╠═╝├─┤├┬┘ │ └┬┘ ${Color_Off}\n";
printf "${BGreen}  ╩ └─┘┴ ┴  ╩  ┴ ┴┴└─ ┴  ┴  ${Color_Off}\n\n";

function sub_help {
    echo "Usage: ./tea-party <subcommand> [options]"
    echo "Subcommands:"
    echo "    prepare                Setup the local environment with required dependencies (get ready for the party)."
    echo "           [--reinstall]   Reinstall the galaxy roles"
    echo "    throw                  Install the suggested dependencies (throw the party)."
    echo "           [...invitees]   Ansible tags to run. If none provided, all tags are run."
    echo ""
}

function sub_prepare {
    if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
        setStatusMessage "Installing the CLT"
        install_clt
    fi

    if ! exists pip; then
        setStatusMessage "Installing PIP"
        sudo easy_install --quiet pip
    fi

    if ! exists ansible; then
        setStatusMessage "Installing Ansible"
        pip install --upgrade setuptools --user python
        sudo pip install -q ansible
    fi

    while test $# -gt 0; do
        case "$1" in
            "--reinstall")
                shift
                install_roles
                ;;
            *)
                triggerError "Unknown option $1"
                ;;
        esac
    done


    if [[ ! -d "$PWD/vendor" ]]; then
        install_roles
    fi

    setSuccessMessage "Prepared environment to install"
    setStatusMessage  "Run './tea-party throw' with optional tags to set up the computer"
}

function sub_throw {
    TAGS=""

    while test $# -gt 0; do
        if [[ $TAGS == "" ]]; then
            TAGS="--tags $1"
        else
            TAGS="$TAGS,$1"
        fi
        shift
    done

    get_sudo
    setStatusMessage "Running the ansible playbook"
    ansible-playbook -i "localhost," computer.yml $TAGS
}

subcommand="${1:-help}"

shift
sub_${subcommand} $@
if [ $? = 127 ]; then
    echo "Error: '$subcommand' is not a known subcommand." >&2
    echo "       Run './tea-party' for a list of known subcommands." >&2
    exit 1
fi
